{"swagger": "1.0", "host": "staging-api.globalforestwatch.org", "info": {"title": "Python Skeleton", "description": "Python Skeleton", "version": "1.0.0"}, "schemes": ["https", "http"], "basePath": "/api/v1", "produces": ["application/vnd.api+json"], "paths": {"/api/v1/aqueduct/analysis/": {"get": {"summary": "Allow  water risk atlas analysis. Pasing this params as 'application/json' on a Post", "description": "Get the water risk scores for the selectec params in the locations array", "parameters": [{"name": "wscheme", "in": "query", "description": "weight scheme as defined in", "type": "string", "required": true}, {"name": "indicator", "in": "query", "description": "a valid indicator that you want to analyse. The available list can be found [here]()", "type": "string", "required": true}, {"name": "geostore", "in": "query", "description": "valid geostore", "type": "string", "required": true}, {"name": "analysis_type", "in": "query", "description": "Type of analysis to perform. Allowed values `annual`, `monthly`, `projected` or `custom`", "type": "string", "required": true}, {"name": "month", "in": "query", "description": "If we have selected `monthly` as *analyssis_type* we will need to specify a month `1..12` from January to December", "type": "integer", "required": false}, {"name": "year", "in": "query", "description": "If we have selected `projected` as *analyssis_type* we will need to specify a year, one of `2030` or `2034`. Other values from *analyssis_type* will consider year as `baseline`", "type": "string", "required": false}, {"name": "change_type", "in": "query", "description": "If we have selected `projected` as *analyssis_type* we will need to specify one of `change_from_baseline` or `future_value`.", "type": "string", "required": false}, {"name": "scenario", "in": "query", "description": "If we have selected `projected` as *analyssis_type* we will need to specify one of `optimistic`, `business_as_usual` or `pessimistic`.", "type": "string", "required": false}, {"name": "locations", "in": "query", "description": "location list name. The text must be formater like `\"[''Location A'',''Loccation B'']\"`.", "type": "string", "required": false}, {"name": "input_address", "in": "query", "description": "location list name as the result of the [geolocation function](). The text must be formater like `\"[''Location A'',''Loccation B'']\"`.", "type": "string", "required": false}, {"name": "match_address", "in": "query", "description": "location list name as the result of the [geolocation function](). The text must be formater like `\"[''Location A'',''Loccation B'']\"`.", "type": "string", "required": false}, {"name": "ids", "in": "query", "description": "Ids list name. The text must be formater like `\"[''Location A'',''Loccation B'']\"`", "type": "string", "required": false}], "responses": {"200": {"description": "Foo object to be returned.", "schema": "FooSchema"}, "404": {"description": "Foo not found."}, "500": {"description": "Internal server error."}}}}, "/api/v1/aqueduct/analysis/cba/expire-cache": {}, "/api/v1/aqueduct/analysis/cba": {}, "/api/v1/aqueduct/analysis/cba/widget/{widget_id}": {}, "/api/v1/aqueduct/analysis/cba/default": {}, "/api/v1/aqueduct/analysis/risk/widget/{widget_id}": {}}, "openapi": "3.0.2"}